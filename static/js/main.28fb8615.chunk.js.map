{"version":3,"sources":["component/Recipe.js","App.js","serviceWorker.js","index.js"],"names":["Recipes","title","calories","image","share","cal","toFixed","className","src","alt","href","target","id","App","useState","recipe","setRecipe","search","setSearch","query","setQuery","useEffect","getrecipe","a","fetch","response","json","data","hits","console","log","onSubmit","e","preventDefault","type","value","onChange","map","Recipe","Key","label","shareAs","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"uRAgBeA,G,YAbC,SAAC,GAAiC,IAAhCC,EAA+B,EAA/BA,MAAMC,EAAyB,EAAzBA,SAASC,EAAgB,EAAhBA,MAAMC,EAAU,EAAVA,MAC7BC,EAAMH,EAASI,QAAQ,GAC7B,OAEA,6BACI,wBAAIC,UAAU,UAAUN,GAC5B,wBAAIM,UAAU,QAAd,cAAiCF,GACjC,yBAAKG,IAAKL,EAAOM,IAAI,IAAIF,UAAU,UACnC,uBAAGG,KAAMN,EAAOO,OAAO,SAASC,GAAG,YAAW,4BAAQL,UAAU,OAAlB,aCwCnCM,EAhDH,WAEV,IAFe,EAKaC,mBAAS,IALtB,mBAKRC,EALQ,KAKAC,EALA,OAMYF,mBAAS,IANrB,mBAMRG,EANQ,KAMDC,EANC,OAOUJ,mBAAS,IAPnB,mBAORK,EAPQ,KAOFC,EAPE,KAQfC,qBAAU,WACRC,MACA,CAACH,IAEH,IAAMG,EAAS,uCAAG,8BAAAC,EAAA,sEACOC,MAAM,mCAAD,OAAoCL,EAApC,mBAXf,WAWe,oBAVd,qCASE,cACVM,EADU,gBAEGA,EAASC,OAFZ,OAEVC,EAFU,OAGhBX,EAAUW,EAAKC,MACfC,QAAQC,IAAIH,EAAKC,MAJD,2CAAH,qDAmBf,OACA,yBAAKrB,UAAU,OACb,0BAAMwB,SATU,SAAAC,GAChBA,EAAEC,iBACFb,EAASH,GACTC,EAAU,KAMkBX,UAAU,eACtC,2BAAOA,UAAU,aAAa2B,KAAK,OAAOC,MAAOlB,EAAQmB,SAdtC,SAACJ,GACpBd,EAAUc,EAAErB,OAAOwB,UAcjB,4BAAQ5B,UAAU,gBAAgB2B,KAAK,UAAvC,WAEF,wBAAI3B,UAAU,SAASY,EAAvB,YACA,yBAAKZ,UAAU,WACdQ,EAAOsB,KAAI,SAAAC,GAAM,OAChB,kBAAC,EAAD,CAASC,IAAKD,EAAOvB,OAAOyB,MAC3BvC,MAAOqC,EAAOvB,OAAOyB,MACtBtC,SAAWoC,EAAOvB,OAAOb,SACxBC,MAAQmC,EAAOvB,OAAOZ,MAAOC,MAAOkC,EAAOvB,OAAO0B,gBClCrCC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL9B,QAAQ8B,MAAMA,EAAMC,c","file":"static/js/main.28fb8615.chunk.js","sourcesContent":["import  React  from \"react\";\r\nimport '../Recipe.css';\r\n\r\nconst Recipes = ({title,calories,image,share}) =>{\r\n    const cal = calories.toFixed(2);\r\n    return(\r\n    \r\n    <div>\r\n        <h1 className=\"recipe\">{title}</h1>\r\n    <h2 className=\"calo\">Calories : {cal}</h2>\r\n    <img src={image} alt=\" \" className=\"image\"></img>\r\n    <a href={share} target=\"_blank\" id=\"urlshare\"><button className=\"url\" >share</button></a>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Recipes;","import React,{useEffect, useState} from 'react';\nimport './App.css';\nimport Recipes from \"./component/Recipe\";\nconst App = () =>{\n  \n  const APP_ID = \"afb92aa0\";\n  const APP_KEY = \"6dc2a3d4b9a9b3711b80a05d68577e6a\";\n\n  const [recipe, setRecipe] = useState([]);\n  const [search,setSearch] = useState('');\n  const [query,setQuery] = useState('');\n  useEffect(()=>{\n    getrecipe();\n  },[query]);\n\n  const getrecipe = async () =>{\n    const response = await fetch(`https://api.edamam.com/search?q=${query}&app_id=${APP_ID}&app_key=${APP_KEY}`); \n    const data = await response.json();\n    setRecipe(data.hits);\n    console.log(data.hits);\n  }\n\n\n  const updateSearch = (e) =>{\n    setSearch(e.target.value);\n  }\n\n  const getSearch = e =>{\n    e.preventDefault();\n    setQuery(search);\n    setSearch('');\n  }\n\n\n  return(\n  <div className=\"App\">\n    <form onSubmit ={getSearch} className=\"search-form\">      \n    <input className=\"search-bar\" type=\"text\" value={search} onChange={updateSearch}></input>\n      <button className=\"search-button\" type=\"submit\">search</button>\n    </form>\n    <h2 className=\"title\">{query} RECIPES</h2>\n    <div className=\"recipes\">\n    {recipe.map(Recipe=>(\n      <Recipes Key={Recipe.recipe.label} \n       title={Recipe.recipe.label} \n      calories ={Recipe.recipe.calories}\n       image ={Recipe.recipe.image} share={Recipe.recipe.shareAs}  />))}\n  </div>\n  </div>\n  );\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}